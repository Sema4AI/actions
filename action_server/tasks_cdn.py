"""Alternative build tasks that use CDN for frontend assets."""
import os
from pathlib import Path
import requests
from invoke import task, Context

CURDIR = Path(__file__).parent.resolve()

@task
def build_frontend_from_cdn(ctx: Context, version: str = "latest"):
    """Build frontend by downloading pre-built assets from CDN"""
    print(f"Downloading pre-built frontend from CDN (version: {version})...")
    
    # Download the action-server binary to extract frontend
    cdn_url = f"https://cdn.sema4.ai/action-server/releases/{version}/linux64/action-server"
    
    # Create a temporary directory for extraction
    temp_dir = CURDIR / "temp_extract"
    temp_dir.mkdir(exist_ok=True)
    
    # Download the binary
    binary_path = temp_dir / "action-server"
    print(f"Downloading from: {cdn_url}")
    response = requests.get(cdn_url, stream=True)
    response.raise_for_status()
    
    with open(binary_path, 'wb') as f:
        for chunk in response.iter_content(chunk_size=8192):
            f.write(chunk)
    
    # Make it executable and run it to get the frontend
    os.chmod(binary_path, 0o755)
    
    # Start the server temporarily to download the frontend
    import subprocess
    import time
    
    # Create minimal package.yaml
    package_yaml = temp_dir / "package.yaml"
    package_yaml.write_text("""name: temp-package
description: Temporary package for extracting frontend
version: 0.1.0
""")
    
    # Create dummy action
    dummy_action = temp_dir / "dummy_action.py"
    dummy_action.write_text("""from sema4ai.actions import action

@action
def dummy():
    return "dummy"
""")
    
    # Start the server
    process = subprocess.Popen(
        [str(binary_path), "start", "--port", "8080"],
        cwd=str(temp_dir),
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE
    )
    
    # Wait for server to start
    print("Waiting for server to start...")
    time.sleep(10)
    
    try:
        # Download the frontend HTML
        response = requests.get("http://localhost:8080/")
        response.raise_for_status()
        html_content = response.content
        
        # Write to _static_contents.py
        dest_static_contents = (
            CURDIR / "src" / "sema4ai" / "action_server" / "_static_contents.py"
        )
        
        file_contents = {"index.html": html_content}
        with open(dest_static_contents, "w", encoding="utf-8") as stream:
            print(f"Writing static contents to: {dest_static_contents}")
            stream.write(
                f"""# coding: utf-8
# Note: autogenerated file.
# To regenerate this file use: inv build-frontend-from-cdn.
# The FILE_CONTENTS contains the contents of the files with
# html/javascript code for the static assets we use.
FILE_CONTENTS = {repr(file_contents)}
"""
            )
        print("Frontend assets successfully extracted from CDN!")
        
    finally:
        # Stop the server
        process.terminate()
        process.wait()
        
        # Cleanup
        import shutil
        shutil.rmtree(temp_dir)