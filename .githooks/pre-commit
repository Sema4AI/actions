#!/usr/bin/env bash
# Pre-commit hook to enforce tier separation in dual-tier build system
# This hook prevents accidental enterprise code leakage into community builds

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "üîç Checking tier separation..."

# Check for enterprise imports in core/ files
VIOLATIONS_FOUND=0

# Get list of staged files in frontend/src/core/
STAGED_CORE_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep "^action_server/frontend/src/core/" | grep -E '\.(ts|tsx)$' || true)

if [ -n "$STAGED_CORE_FILES" ]; then
    echo "Checking core/ files for enterprise imports..."
    
    while IFS= read -r file; do
        if [ -f "$file" ]; then
            # Check for @sema4ai/* imports
            SEMA4AI_IMPORTS=$(grep -n "@sema4ai/" "$file" || true)
            if [ -n "$SEMA4AI_IMPORTS" ]; then
                echo -e "${RED}ERROR: Enterprise import detected in core/ file:${NC}"
                echo "  File: $file"
                echo "$SEMA4AI_IMPORTS" | while IFS= read -r line; do
                    echo "  $line"
                done
                VIOLATIONS_FOUND=1
            fi
            
            # Check for @/enterprise imports
            ENTERPRISE_IMPORTS=$(grep -n "@/enterprise" "$file" || true)
            if [ -n "$ENTERPRISE_IMPORTS" ]; then
                echo -e "${RED}ERROR: Enterprise import detected in core/ file:${NC}"
                echo "  File: $file"
                echo "$ENTERPRISE_IMPORTS" | while IFS= read -r line; do
                    echo "  $line"
                done
                VIOLATIONS_FOUND=1
            fi
            
            # Check for ../enterprise relative imports
            RELATIVE_ENTERPRISE_IMPORTS=$(grep -n "../enterprise" "$file" || true)
            if [ -n "$RELATIVE_ENTERPRISE_IMPORTS" ]; then
                echo -e "${RED}ERROR: Enterprise import detected in core/ file:${NC}"
                echo "  File: $file"
                echo "$RELATIVE_ENTERPRISE_IMPORTS" | while IFS= read -r line; do
                    echo "  $line"
                done
                VIOLATIONS_FOUND=1
            fi
        fi
    done <<< "$STAGED_CORE_FILES"
fi

# Check for enterprise/ file modifications on community-only branches
CURRENT_BRANCH=$(git branch --show-current)
STAGED_ENTERPRISE_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep "^action_server/frontend/src/enterprise/" || true)

# Community branch pattern: matches branches like "community-feature", "feat/community-*", etc.
if [[ "$CURRENT_BRANCH" =~ community ]]; then
    if [ -n "$STAGED_ENTERPRISE_FILES" ]; then
        echo -e "${YELLOW}WARNING: Enterprise files modified on community branch:${NC}"
        echo "  Branch: $CURRENT_BRANCH"
        echo "  Files:"
        echo "$STAGED_ENTERPRISE_FILES" | while IFS= read -r file; do
            echo "    - $file"
        done
        echo -e "${YELLOW}Consider moving these changes to an enterprise branch.${NC}"
    fi
fi

# Final verdict
if [ $VIOLATIONS_FOUND -eq 1 ]; then
    echo -e "${RED}‚ùå Pre-commit check FAILED${NC}"
    echo ""
    echo "Enterprise imports detected in core/ files."
    echo "Core modules must not import enterprise code."
    echo ""
    echo "To fix:"
    echo "  1. Move shared code to src/shared/"
    echo "  2. Create community-tier alternatives in src/core/"
    echo "  3. Use conditional imports based on build tier"
    echo ""
    echo "To bypass this check (not recommended):"
    echo "  git commit --no-verify"
    exit 1
else
    echo -e "${GREEN}‚úÖ Tier separation check passed${NC}"
    exit 0
fi
