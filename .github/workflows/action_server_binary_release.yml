# Important!!
# This file is auto-generated by running:
#
#   python _gen_workflows.py
#
# Do not edit it directly, your changes will be lost!
# Instead, edit `_gen_workflows.py` with the required
# changes and rerun that script (or manually change
# this file, but before the final version
# make sure that you update the `_gen_workflows.py`
# script to match the changes you made here
# and rerun the script).


name: Action Server BINARY Release
permissions:
  contents: read
'on':
  push:
    tags:
    - sema4ai-action_server-*
    branches:
    - '*-beta'
defaults:
  run:
    working-directory: ./action_server
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os:
        - ubuntu-22.04
        - windows-2019
        - macos-13
        - macos-15
        include:
        - os: ubuntu-22.04
          python: '3.12'
          asset_path: action_server/dist/final/action-server
        - os: windows-2019
          python: '3.12'
          asset_path: action_server/dist/final/action-server.exe
        - os: macos-15
          python: '3.12'
          asset_path: action_server/dist/final/action-server
        - os: macos-13
          python: '3.12'
          asset_path: action_server/dist/final/action-server
    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v3
    - name: Install the latest version of uv
      uses: astral-sh/setup-uv@v5
      with:
        enable-cache: true
    - name: Install Python 3.12
      run: uv python install 3.12
    - name: Install devutils requirements
      run: uv run --no-project --python ${{ matrix.python }}  python -m pip install
        --break-system-packages -r ../devutils/requirements.txt
    - name: Install project (not dev)
      if: contains(matrix.name, '-devmode') == false
      run: uv run --no-project --python ${{ matrix.python }} inv install
    - name: Install project (dev)
      if: contains(matrix.name, '-devmode')
      run: uv run --no-project --python ${{ matrix.python }} inv devinstall
    - name: Setup node
      uses: actions/setup-node@v3
      with:
        node-version: 20.x
        registry-url: https://npm.pkg.github.com
        scope: '@robocorp'
    - name: Setup go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    - name: Check tag version
      run: uv run --no-project --python ${{ matrix.python }} poetry run inv check-tag-version
      if: ${{ !endsWith(github.ref_name, '-beta') }}
    - name: Build frontend
      run: uv run --no-project --python ${{ matrix.python }} inv build-frontend
      env:
        CI: true
        NODE_AUTH_TOKEN: ${{ secrets.GH_PAT_READ_PACKAGES }}
    - name: Build OAuth2 config
      run: uv run --no-project --python ${{ matrix.python }} inv build-oauth2-config
      env:
        GH_TOKEN: ${{ secrets.GH_PAT_GHA_TO_ANOTHER_REPO }}
    - name: Set version
      run: '

        uv run --no-project --python ${{ matrix.python }} poetry version | awk ''{print
        $2}'' > version.txt

        VERSION=$(cat version.txt)


        echo "Version: $VERSION"

        echo "version=$VERSION" >> "$GITHUB_OUTPUT"

        '
      id: set_version
      if: ${{ matrix.os == 'ubuntu-22.04' }}
    - name: Build binary
      env:
        RC_ACTION_SERVER_FORCE_DOWNLOAD_RCC: 'true'
        RC_ACTION_SERVER_DO_SELFTEST: 'true'
        MACOS_SIGNING_CERT: ${{ secrets.MACOS_SIGNING_CERT_SEMA4AI }}
        MACOS_SIGNING_CERT_PASSWORD: ${{ secrets.MACOS_SIGNING_CERT_PASSWORD_SEMA4AI
          }}
        MACOS_SIGNING_CERT_NAME: ${{ secrets.MACOS_SIGNING_CERT_NAME_SEMA4AI }}
        APPLEID: ${{ secrets.MACOS_APP_ID_FOR_NOTARIZATION_SEMA4AI }}
        APPLETEAMID: ${{ secrets.MACOS_TEAM_ID_FOR_NOTARIZATION_SEMA4AI }}
        APPLEIDPASS: ${{ secrets.MACOS_APP_ID_PASSWORD_FOR_NOTARIZATION_SEMA4AI }}
        VAULT_URL: ${{ secrets.WIN_SIGN_AZURE_KEY_VAULT_URL_SEMA4AI }}
        CLIENT_ID: ${{ secrets.WIN_SIGN_AZURE_KEY_VAULT_CLIENT_ID_SEMA4AI }}
        TENANT_ID: ${{ secrets.WIN_SIGN_AZURE_KEY_VAULT_TENANT_ID_SEMA4AI }}
        CLIENT_SECRET: ${{ secrets.WIN_SIGN_AZURE_KEY_VAULT_CLIENT_SECRET_SEMA4AI
          }}
        CERTIFICATE_NAME: ${{ secrets.WIN_SIGN_AZURE_KEY_VAULT_CERTIFICATE_NAME_SEMA4AI
          }}
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_REF_NAME: ${{ github.ref_name }}
        GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}
      run: uv run --no-project --python ${{ matrix.python }} poetry run inv build-executable
        --sign --go-wrapper
    - name: 'Upload artifact: action_server/dist/final/'
      uses: actions/upload-artifact@v4
      with:
        name: action-server-${{ matrix.os }}
        path: action_server/dist/final/
    - name: 'Upload artifact: action_server/version.txt'
      uses: actions/upload-artifact@v4
      with:
        name: action-server-version
        path: action_server/version.txt
      if: ${{ matrix.os == 'ubuntu-22.04' }}
    outputs:
      version: ${{ steps.set_version.outputs.version }}
  deploy-s3:
    permissions:
      id-token: write
      contents: read
    needs:
    - build
    defaults:
      run:
        working-directory: ./action_server
    runs-on: ubuntu-22.04
    outputs:
      is_beta: ${{ steps.check_beta.outputs.is_beta }}
    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v3
    - name: Check if this is a beta release
      id: check_beta
      run: '

        is_beta=${{ endsWith(github.ref_name, ''-beta'') }}

        echo "is_beta: $is_beta"

        echo "::set-output name=is_beta::$is_beta"

        '
    - name: Download artifact windows-2019
      uses: actions/download-artifact@v4
      with:
        name: action-server-windows-2019
        path: action_server/build/windows64/
    - name: Download artifact macos-13
      uses: actions/download-artifact@v4
      with:
        name: action-server-macos-13
        path: action_server/build/macos64/
    - name: Download artifact macos-15
      uses: actions/download-artifact@v4
      with:
        name: action-server-macos-15
        path: action_server/build/macos-arm64/
    - name: Download artifact ubuntu-22.04
      uses: actions/download-artifact@v4
      with:
        name: action-server-ubuntu-22.04
        path: action_server/build/linux64/
    - name: Download artifact version
      uses: actions/download-artifact@v4
      with:
        name: action-server-version
        path: action_server/build/
    - name: Put files in s3-drop
      run: '

        ls -l

        pwd

        ls -l build

        mkdir s3-drop

        mv build/version.txt s3-drop/

        mv build/macos64 s3-drop/

        mv build/macos-arm64 s3-drop/

        mv build/linux64 s3-drop/

        mv build/windows64 s3-drop/

        ls -l s3-drop/

        ver=`cat s3-drop/version.txt`

        echo "actionServerVersion=${ver}" >> $GITHUB_ENV

        '
    - name: 'Upload artifact: action_server/s3-drop'
      uses: actions/upload-artifact@v4
      with:
        name: action-server-artifacts-for-s3-${{ env.actionServerVersion }}
        path: action_server/s3-drop
    - name: Configure AWS credentials Dropbox bucket
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: eu-west-1
        role-to-assume: arn:aws:iam::710450854638:role/github-action-robocorp-action-server
    - name: AWS S3 copies
      run: "\nif [ \"${{ steps.check_beta.outputs.is_beta }}\" = \"false\" ]; then\n\
        \  echo \"Normal release, aws sync to drop-box, full pipeline\"\n  aws s3\
        \ sync s3-drop s3://robocorp-action-server-build-drop-box\nelse\n  echo \"\
        BETA RELEASE, only copy the executable for testing\"\n  S3_BASE_URL=\"s3://downloads.robocorp.com/action-server/beta\"\
        \n  aws s3 cp s3-drop/version.txt $S3_BASE_URL/version.txt --cache-control\
        \ max-age=120 --content-type \"text/plain\"\n  aws s3 cp s3-drop/windows64/action-server.exe\
        \ $S3_BASE_URL/windows64/action-server.exe --cache-control max-age=120 --content-type\
        \ \"application/octet-stream\"\n  aws s3 cp s3-drop/macos64/action-server\
        \ $S3_BASE_URL/macos64/action-server --cache-control max-age=120 --content-type\
        \ \"application/octet-stream\"\n  aws s3 cp s3-drop/macos-arm64/action-server\
        \ $S3_BASE_URL/macos-arm64/action-server --cache-control max-age=120 --content-type\
        \ \"application/octet-stream\"\n  aws s3 cp s3-drop/linux64/action-server\
        \ $S3_BASE_URL/linux64/action-server --cache-control max-age=120 --content-type\
        \ \"application/octet-stream\"\nfi\n"
  trigger-brew-workflow:
    needs:
    - build
    - deploy-s3
    defaults:
      run:
        working-directory: .
    if: ${{ needs.deploy-s3.outputs.is_beta == 'false' }}
    runs-on: ubuntu-22.04
    steps:
    - name: Wait for Downloads S3 Bucket to have the right content
      timeout-minutes: 5
      run: "\nVERSION_URL=\"https://cdn.sema4.ai/action-server/releases/latest/version.txt\"\
        \nEXPECTED_VERSION=${{ needs.build.outputs.version }}\necho \"Expected version:\
        \ $EXPECTED_VERSION\"\nwhile true; do\n  DOWNLOADED_VERSION=$(curl -sS $VERSION_URL)\n\
        \  echo \"Downloaded version: $DOWNLOADED_VERSION\"\n  echo \"Expected version:\
        \ $EXPECTED_VERSION\"\n    if [ \"$DOWNLOADED_VERSION\" = \"$EXPECTED_VERSION\"\
        \ ]; then\n      echo \"Versions match.\"\n      break\n    else\n      echo\
        \ \"Versions do not match. Retrying in 30 seconds.\"\n    fi\n    sleep 30\n\
        \    done\n"
    - name: Trigger Brew Deploy Workflow
      run: 'curl -X POST            -H "Authorization: token ${{ secrets.GH_PAT_GHA_TO_ANOTHER_REPO
        }}"            -H "Accept: application/vnd.github.v3+json"            https://api.github.com/repos/sema4ai/homebrew-tools/actions/workflows/publish.yml/dispatches            -d
        ''{"ref":"main","inputs":{"version":"${{ needs.sign-macos.outputs.version
        }}"}}'''
  release:
    if: ${{ needs.deploy-s3.outputs.is_beta == 'false' }}
    permissions:
      contents: write
    needs:
    - deploy-s3
    - trigger-brew-workflow
    defaults:
      run:
        working-directory: .
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Create GitHub release
      uses: Roang-zero1/github-create-release-action@57eb9bdce7a964e48788b9e78b5ac766cb684803
      with:
        release_title: ${{ github.ref_name }}
        changelog_file: action_server/docs/CHANGELOG.md
        release_text: Binaries available as assets. Run `action-server -h` for usage
          instructions.
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/download-artifact@v4
      with:
        name: action-server-windows-2019
        path: windows64/
    - uses: actions/download-artifact@v4
      with:
        name: action-server-macos-13
        path: macos64/
    - uses: actions/download-artifact@v4
      with:
        name: action-server-macos-15
        path: macos-arm64/
    - uses: actions/download-artifact@v4
      with:
        name: action-server-ubuntu-22.04
        path: linux64/
    - name: Print contents
      run: "\n          pwd\n          ls -l\n          echo \"Windows64:\"\n    \
        \      cd windows64\n          ls -l\n          cd ../macos64\n          echo\
        \ \"MacOS64:\"\n          ls -l\n          cd ../macos-arm64\n          echo\
        \ \"MacOS-arm64:\"\n          ls -l\n          cd ../linux64\n          echo\
        \ \"Linux64:\"\n          ls -l\n          cd ..\n          echo \"GitHub\
        \ ref: ${{ github.ref }}\"\n          "
    - name: Upload Linux binary
      uses: svenstaro/upload-release-action@04733e069f2d7f7f0b4aebc4fbdbce8613b03ccd
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./linux64/action-server
        asset_name: $tag-linux64
        tag: ${{ github.ref }}
        overwrite: true
    - name: Upload MacOS binary
      uses: svenstaro/upload-release-action@04733e069f2d7f7f0b4aebc4fbdbce8613b03ccd
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./macos64/action-server
        asset_name: $tag-macos64
        tag: ${{ github.ref }}
        overwrite: true
    - name: Upload MacOS arm binary
      uses: svenstaro/upload-release-action@04733e069f2d7f7f0b4aebc4fbdbce8613b03ccd
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./macos-arm64/action-server
        asset_name: $tag-macos-arm64
        tag: ${{ github.ref }}
        overwrite: true
    - name: Upload Windows binary
      uses: svenstaro/upload-release-action@04733e069f2d7f7f0b4aebc4fbdbce8613b03ccd
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: ./windows64/action-server.exe
        asset_name: $tag-windows64
        tag: ${{ github.ref }}
        overwrite: true


# Important!!
# This file is auto-generated by running:
#
#   python _gen_workflows.py
#
# Do not edit it directly, your changes will be lost!
# Instead, edit `_gen_workflows.py` with the required
# changes and rerun that script (or manually change
# this file, but before the final version
# make sure that you update the `_gen_workflows.py`
# script to match the changes you made here
# and rerun the script).

