name: Action Server [BINARY] Release

on:
  workflow_dispatch:
    # Enables manual triggering via GitHub Actions

  push:
    # branches:
    #   - wip2
    tags:
      - "sema4ai-action_server-*"

defaults:
  run:
    working-directory: "./action_server"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-11]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          registry-url: "https://npm.pkg.github.com"
          scope: "@robocorp"

      - name: Install cibuildwheel
        run: |
          python -m pip install poetry
          python -m pip install invoke
          python -m invoke build-frontend
        env:
          CI: true
          NODE_AUTH_TOKEN: ${{ secrets.GH_PAT_READ_PACKAGES }}

      - name: Build binary
        run: |
          python -m pip install pyoxidizer
          cd build-binary
          pyoxidizer run --release
        env:
          RC_ACTION_SERVER_FORCE_DOWNLOAD_RCC: true
          RC_ACTION_SERVER_DO_SELFTEST: true

      - name: Action Server Python Binary Signing [Windows]
        if: matrix.os == 'windows-2019'
        env:
          NODE_AUTH_TOKEN: ${{secrets.GH_PAT_READ_PACKAGES}}
          VAULT_URL: ${{secrets.WIN_SIGN_AZURE_KEY_VAULT_URL}}
          CLIENT_ID: ${{secrets.WIN_SIGN_AZURE_KEY_VAULT_CLIENT_ID}}
          TENANT_ID: ${{secrets.WIN_SIGN_AZURE_KEY_VAULT_TENANT_ID}}
          CLIENT_SECRET: ${{secrets.WIN_SIGN_AZURE_KEY_VAULT_CLIENT_SECRET}}
          CERTIFICATE: ${{secrets.WIN_SIGN_AZURE_KEY_VAULT_CERTIFICATE_NAME}}
        run: |
          dotnet tool install --global AzureSignTool --version 3.0.0
          azuresigntool sign --description-url "https://robocorp.com" --file-digest sha256 --azure-key-vault-url $Env:VAULT_URL --azure-key-vault-client-id $Env:CLIENT_ID --azure-key-vault-tenant-id $Env:TENANT_ID --azure-key-vault-client-secret $Env:CLIENT_SECRET --azure-key-vault-certificate $Env:CERTIFICATE --timestamp-rfc3161 http://timestamp.digicert.com --timestamp-digest sha256 build-binary\build\x86_64-pc-windows-msvc\release\install\action-server.exe
        shell: powershell

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.21"

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-binaries
          path: "action_server/build-binary/build/*"

      # Having a separate artifact for version.txt helps downstream workflows
      - name: Get version
        if: matrix.os == 'ubuntu-20.04'
        run: |
          poetry version | awk '{print $2}' > version.txt
      - uses: actions/upload-artifact@v4
        if: matrix.os == 'ubuntu-20.04'
        with:
          name: action-server-version
          path: "action_server/version.txt"

      - name: Copy assets [Linux]
        if: matrix.os == 'ubuntu-20.04'
        run: |
          cp -R build-binary/build/x86_64-unknown-linux-gnu/release/install/* go-wrapper/assets
      - name: Copy assets [Mac]
        if: matrix.os == 'macos-11'
        run: |
          cp -R build-binary/build/x86_64-apple-darwin/release/install/* go-wrapper/assets
      - name: Copy assets [Windows]
        if: matrix.os == 'windows-2019'
        run: |
          xcopy /e /h /i build-binary\\build\\x86_64-pc-windows-msvc\\release\\install go-wrapper\\assets

      - uses: actions/download-artifact@v4
        with:
          name: action-server-version
          path: "action_server/go-wrapper/assets"

      - name: Build Go binary wrapper
        run: |
          cd go-wrapper
          go build -o action-server-unsigned

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-action-server-unsigned
          path: "action_server/go-wrapper/action-server-unsigned"

  sign-macos:
    needs:
      - build
    outputs:
      version: ${{ steps.set_version.outputs.version }}
    defaults:
      run:
        working-directory: ./action_server
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: macOS-action-server-unsigned
          path: action_server/build

      - uses: actions/download-artifact@v4
        with:
          name: action-server-version
          path: "action_server"

      - name: Set Version for Brew
        id: set_version
        run: |
          VERSION=$(cat version.txt)
          echo "Version: $VERSION"
          echo "::set-output name=version::$VERSION"

      - name: Action Server Signing [macOS]
        env:
          APPLEID: ${{ secrets.MACOS_APP_ID_FOR_NOTARIZATION_SEMA4AI }}
          APPLEIDPASS: ${{ secrets.MACOS_APP_ID_PASS_FOR_NOTARIZATION_SEMA4AI }}
          APPLETEAMID: ${{ secrets.MACOS_TEAM_ID_FOR_NOTARIZATION_SEMA4AI }}
          MACOS_SIGNING_CERT: ${{ secrets.MACOS_SIGNING_CERT_SEMA4AI }}
          MACOS_SIGNING_CERT_PASSWORD: ${{ secrets.MACOS_SIGNING_CERT_PASSWORD_SEMA4AI }}
          MACOS_SIGNING_CERT_NAME: ${{ secrets.MACOS_SIGNING_CERT_NAME_SEMA4AI }}
        run: |
          # sign MacOS binary
          security create-keychain -p "$MACOS_SIGNING_CERT_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_SIGNING_CERT_PASSWORD" build.keychain
          echo $MACOS_SIGNING_CERT | base64 --decode -o cert.p12
          security import cert.p12 -A -P $MACOS_SIGNING_CERT_PASSWORD
          security set-key-partition-list -S apple-tool:,apple: -s -k "$MACOS_SIGNING_CERT_PASSWORD" build.keychain
          ls -la build/
          codesign --verbose=4 --entitlements entitlements.mac.plist --deep --force -o runtime -s "$MACOS_SIGNING_CERT_NAME" --timestamp build/action-server-unsigned
          codesign --verify --deep --verbose=2 build/action-server-unsigned
          codesign -v --verbose=4 --display build/action-server-unsigned
          # notarize MacOS binary (zipped because notarization does not allow executable files)
          zip action-server.zip build/action-server-unsigned
          ls -la .
          ls -la build
          echo xcrun notarytool submit --apple-id $APPLEID --team-id $APPLETEAMID --password $APPLEIDPASS action-server.zip
          xcrun notarytool submit --apple-id $APPLEID --team-id $APPLETEAMID --password $APPLEIDPASS action-server.zip
          unzip -o action-server.zip -d build/
          mv build/action-server-unsigned build/action-server

      - uses: actions/upload-artifact@v4
        with:
          name: action-server-signed-macos
          path: action_server/build/action-server

  sign-windows:
    needs:
      - build
    defaults:
      run:
        working-directory: ./action_server
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: Windows-action-server-unsigned
          path: action_server/build

      - name: Action Server Signing [Windows]
        env:
          NODE_AUTH_TOKEN: ${{secrets.GH_PAT_READ_PACKAGES}}
          VAULT_URL: ${{secrets.WIN_SIGN_AZURE_KEY_VAULT_URL_SEMA4AI}}
          CLIENT_ID: ${{secrets.WIN_SIGN_AZURE_KEY_VAULT_CLIENT_ID_SEMA4AI}}
          TENANT_ID: ${{secrets.WIN_SIGN_AZURE_KEY_VAULT_TENANT_ID_SEMA4AI}}
          CLIENT_SECRET: ${{secrets.WIN_SIGN_AZURE_KEY_VAULT_CLIENT_SECRET_SEMA4AI}}
          CERTIFICATE: ${{secrets.WIN_SIGN_AZURE_KEY_VAULT_CERTIFICATE_NAME_SEMA4AI}}
        run: |
          dotnet tool install --global AzureSignTool --version 3.0.0
          mv build\action-server-unsigned build\action-server.exe
          azuresigntool sign --description-url "https://robocorp.com" --file-digest sha256 --azure-key-vault-url $Env:VAULT_URL --azure-key-vault-client-id $Env:CLIENT_ID --azure-key-vault-tenant-id $Env:TENANT_ID --azure-key-vault-client-secret $Env:CLIENT_SECRET --azure-key-vault-certificate $Env:CERTIFICATE --timestamp-rfc3161 http://timestamp.digicert.com --timestamp-digest sha256 build\action-server.exe
        shell: powershell

      - uses: actions/upload-artifact@v4
        with:
          name: action-server-signed-windows
          path: action_server/build/action-server.exe
