name: Action Server [BINARY] Release

on:
  workflow_dispatch:
    # Enables manual triggering via GitHub Actions

  push:
    # branches:
    #   - macos_arm64
    tags:
      - "sema4ai-action_server-*"

defaults:
  run:
    working-directory: "./action_server"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # Important: Changing os requires updating the related references in this yml.
        os: [
            ubuntu-20.04,
            windows-2019,
            macos-13, # used for the x86_64 binary
            macos-15, # used for the arm64 binary
          ]
        include:
          - os: ubuntu-20.04
            asset_path: action_server/dist/final/action-server
          - os: windows-2019
            asset_path: action_server/dist/final/action-server.exe
          - os: macos-15
            asset_path: action_server/dist/final/action-server
          - os: macos-13
            asset_path: action_server/dist/final/action-server

    outputs:
      version: ${{ steps.set_version.outputs.version }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: 20.x
          registry-url: "https://npm.pkg.github.com"
          scope: "@robocorp"

      - name: Install build requirements
        run: |
          python -m pip install poetry
          python -m pip install invoke
          python -m invoke build-frontend
          python -m invoke build-oauth2-config
        env:
          CI: true
          NODE_AUTH_TOKEN: ${{ secrets.GH_PAT_READ_PACKAGES }}
          GH_TOKEN: ${{ secrets.GH_PAT_GHA_TO_ANOTHER_REPO }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Build binary
        run: |
          poetry install
          poetry run inv build-executable --sign --go-wrapper
        env:
          RC_ACTION_SERVER_FORCE_DOWNLOAD_RCC: true
          RC_ACTION_SERVER_DO_SELFTEST: true

          MACOS_SIGNING_CERT: ${{ secrets.MACOS_SIGNING_CERT_SEMA4AI }}
          MACOS_SIGNING_CERT_PASSWORD: ${{ secrets.MACOS_SIGNING_CERT_PASSWORD_SEMA4AI }}
          MACOS_SIGNING_CERT_NAME: ${{ secrets.MACOS_SIGNING_CERT_NAME_SEMA4AI }}

          APPLEID: ${{ secrets.MACOS_APP_ID_FOR_NOTARIZATION_SEMA4AI }}
          APPLETEAMID: ${{ secrets.MACOS_TEAM_ID_FOR_NOTARIZATION_SEMA4AI }}
          APPLEIDPASS: ${{ secrets.MACOS_APP_ID_PASSWORD_FOR_NOTARIZATION_SEMA4AI }}

          VAULT_URL: ${{ secrets.WIN_SIGN_AZURE_KEY_VAULT_URL_SEMA4AI }}
          CLIENT_ID: ${{ secrets.WIN_SIGN_AZURE_KEY_VAULT_CLIENT_ID_SEMA4AI }}
          TENANT_ID: ${{ secrets.WIN_SIGN_AZURE_KEY_VAULT_TENANT_ID_SEMA4AI }}
          CLIENT_SECRET: ${{ secrets.WIN_SIGN_AZURE_KEY_VAULT_CLIENT_SECRET_SEMA4AI }}
          CERTIFICATE_NAME: ${{ secrets.WIN_SIGN_AZURE_KEY_VAULT_CERTIFICATE_NAME_SEMA4AI }}

          GITHUB_EVENT_NAME: ${{ github.event_name }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
          GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}

      - uses: actions/upload-artifact@v4
        with:
          name: action-server-${{ matrix.os }}
          path: ${{ matrix.asset_path }}

      - name: Get version
        if: ${{ matrix.os == 'windows-2019' }}
        run: |
          poetry version | awk '{print $2}' > version.txt

          $value = Get-Content -Raw -Path version.txt
          echo "version=$value"
          "version=$value" >> $env:GITHUB_OUTPUT
        shell: pwsh

      - name: Get version
        if: ${{ matrix.os != 'windows-2019' }}
        run: |
          poetry version | awk '{print $2}' > version.txt
          VERSION=$(cat version.txt)

          echo "Version: $VERSION"
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      # Having a separate artifact for version.txt helps downstream workflows
      - uses: actions/upload-artifact@v4
        continue-on-error: true # Continue on error because only the first upload will succeed (the other jobs will fail to upload the same file, but that's ok)
        with:
          name: action-server-version
          path: "action_server/version.txt"

  deploy-s3:
    permissions:
      id-token: write # required by AWS aws-actions/configure-aws-credentials
      contents: read
    needs:
      - build
    defaults:
      run:
        working-directory: ./action_server
    runs-on: ubuntu-latest
    outputs:
      is_beta: ${{ steps.check_beta.outputs.is_beta }}

    steps:
      - uses: actions/checkout@v4

      - name: Check if this is a beta release
        id: check_beta
        run: |
          is_beta=${{ endsWith(github.ref_name, '-beta') }}
          echo "is_beta: $is_beta"
          echo "::set-output name=is_beta::$is_beta"

      - uses: actions/download-artifact@v4
        with:
          name: action-server-windows-2019
          path: action_server/build/windows64/
      - uses: actions/download-artifact@v4
        with:
          name: action-server-macos-13
          path: action_server/build/macos64/
      - uses: actions/download-artifact@v4
        with:
          name: action-server-macos-15
          path: action_server/build/macos-arm64/
      - uses: actions/download-artifact@v4
        with:
          name: action-server-ubuntu-20.04
          path: action_server/build/linux64/
      - uses: actions/download-artifact@v4
        with:
          name: action-server-version
          path: action_server/build/
      - run: |
          ls -l
          pwd
          ls -l build
          mkdir s3-drop
          mv build/version.txt s3-drop/
          mv build/macos64 s3-drop/
          mv build/macos-arm64 s3-drop/
          mv build/linux64 s3-drop/
          mv build/windows64 s3-drop/
          ls -l s3-drop/
          ver=`cat s3-drop/version.txt`
          echo "actionServerVersion=${ver}" >> $GITHUB_ENV
      - uses: actions/upload-artifact@v4
        with:
          name: action-server-artifacts-for-s3-${{ env.actionServerVersion }}
          path: action_server/s3-drop
      - name: Configure AWS credentials Dropbox bucket
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-1
          role-to-assume: arn:aws:iam::710450854638:role/github-action-robocorp-action-server
      - name: AWS S3 copies
        run: |
          if [ "${{ steps.check_beta.outputs.is_beta }}" = "false" ]; then
            echo "Normal release, aws sync to drop-box, full pipeline"
            aws s3 sync s3-drop s3://robocorp-action-server-build-drop-box
          else
            echo "BETA RELEASE, only copy the executable for testing"
            S3_BASE_URL="s3://downloads.robocorp.com/action-server/beta"
            aws s3 cp s3-drop/version.txt $S3_BASE_URL/version.txt --cache-control max-age=120 --content-type "text/plain"
            aws s3 cp s3-drop/windows64/action-server.exe $S3_BASE_URL/windows64/action-server.exe --cache-control max-age=120 --content-type "application/octet-stream"
            aws s3 cp s3-drop/macos64/action-server $S3_BASE_URL/macos64/action-server --cache-control max-age=120 --content-type "application/octet-stream"
            aws s3 cp s3-drop/macos-arm64/action-server $S3_BASE_URL/macos-arm64/action-server --cache-control max-age=120 --content-type "application/octet-stream"
            aws s3 cp s3-drop/linux64/action-server $S3_BASE_URL/linux64/action-server --cache-control max-age=120 --content-type "application/octet-stream"
          fi

  trigger-brew-workflow:
    needs:
      # build needs to be explicit in order to get the version, even if it's implied
      - build
      - deploy-s3
    defaults:
      run:
        working-directory: .

    # No Brew run for beta -releases
    if: ${{ needs.deploy-s3.outputs.is_beta == 'false' }}

    runs-on: ubuntu-latest

    steps:
      - name: Wait for Downloads S3 Bucket to have the right content
        timeout-minutes: 5
        run: |
          VERSION_URL="https://cdn.sema4.ai/action-server/releases/latest/version.txt"
          EXPECTED_VERSION=${{ needs.build.outputs.version }}
          echo "Expected version: $EXPECTED_VERSION"

          while true; do
            DOWNLOADED_VERSION=$(curl -sS $VERSION_URL)
            echo "Downloaded version: $DOWNLOADED_VERSION"
            echo "Expected version: $EXPECTED_VERSION"

            if [ "$DOWNLOADED_VERSION" = "$EXPECTED_VERSION" ]; then
              echo "Versions match."
              break
            else
              echo "Versions do not match. Retrying in 30 seconds."
            fi

            sleep 30
          done
      - name: Trigger Brew Deploy Workflow
        run: |
          curl -X POST \
           -H "Authorization: token ${{ secrets.GH_PAT_GHA_TO_ANOTHER_REPO }}" \
           -H "Accept: application/vnd.github.v3+json" \
           https://api.github.com/repos/sema4ai/homebrew-tools/actions/workflows/publish.yml/dispatches \
           -d '{"ref":"main","inputs":{"version":"${{ needs.sign-macos.outputs.version }}"}}'

  release:
    if: ${{ needs.deploy-s3.outputs.is_beta == 'false' }}

    permissions:
      contents: write # Needed to create release

    needs:
      - deploy-s3 # needed for is_beta
      - trigger-brew-workflow

    defaults:
      run:
        working-directory: .

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Create GitHub release
        uses: Roang-zero1/github-create-release-action@57eb9bdce7a964e48788b9e78b5ac766cb684803 # v3
        with:
          release_title: ${{ github.ref_name }}
          changelog_file: action_server/docs/CHANGELOG.md
          release_text: Binaries available as assets. Run `action-server -h` for usage instructions.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - uses: actions/download-artifact@v4
        with:
          name: action-server-windows-2019
          path: windows64/

      - uses: actions/download-artifact@v4
        with:
          name: action-server-macos-13
          path: macos64/

      - uses: actions/download-artifact@v4
        with:
          name: action-server-macos-15
          path: macos-arm64/

      - uses: actions/download-artifact@v4
        with:
          name: action-server-ubuntu-20.04
          path: linux64/

      - name: Print contents
        run: |
          pwd
          ls -l
          echo "Windows64:"
          cd windows64
          ls -l
          cd ../macos64
          echo "MacOS64:"
          ls -l
          cd ../macos-arm64
          echo "MacOS-arm64:"
          ls -l
          cd ../linux64
          echo "Linux64:"
          ls -l
          cd ..
          echo "GitHub ref: ${{ github.ref }}"

      # Upload binaries to release

      - name: Upload Linux binary
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./linux64/action-server
          asset_name: $tag-linux64
          tag: ${{ github.ref }}
          overwrite: true
      - name: Upload MacOS binary
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./macos64/action-server
          asset_name: $tag-macos64
          tag: ${{ github.ref }}
          overwrite: true
      - name: Upload MacOS arm binary
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./macos-arm64/action-server
          asset_name: $tag-macos-arm64
          tag: ${{ github.ref }}
          overwrite: true
      - name: Upload Windows binary
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./windows64/action-server.exe
          asset_name: $tag-windows64
          tag: ${{ github.ref }}
          overwrite: true
