# Note: auto-generated by `_gen_workflows.py`
name: Action Server Tests
'on':
  push:
    branches:
    - master
    - wip
    paths:
    - action_server/**
    - .github/workflows/action_server_tests.yml
    - devutils/**
    - actions/**
    - sema4ai-http-helper/**
    - common/**
    - build_common/**
  pull_request:
    branches:
    - master
    paths:
    - action_server/**
    - .github/workflows/action_server_tests.yml
    - devutils/**
    - actions/**
    - sema4ai-http-helper/**
    - common/**
    - build_common/**
defaults:
  run:
    working-directory: ./action_server
jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name:
        - ubuntu-py3.12-devmode
        - windows-py3.12-devmode
        - macos-py3.12-devmode
        include:
        - name: ubuntu-py3.12-devmode
          python: '3.12'
          os: ubuntu-latest
        - name: windows-py3.12-devmode
          python: '3.12'
          os: windows-latest
        - name: macos-py3.12-devmode
          os: macos-latest
          python: '3.12'
    steps:
    - name: Checkout repository and submodules
      uses: actions/checkout@v3
    - name: Install poetry
      run: pipx install poetry
    - name: Set up Python ${{ matrix.python }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python }}
        cache: poetry
    - name: Install devutils requirements
      run: python -m pip install -r ../devutils/requirements.txt
    - name: Install project (not dev)
      if: contains(matrix.name, '-devmode') == false
      run: inv install
    - name: Install project (dev)
      if: contains(matrix.name, '-devmode')
      run: inv devinstall
    - name: Setup go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    - name: Setup node
      uses: actions/setup-node@v3
      with:
        node-version: 20.x
        registry-url: https://npm.pkg.github.com
        scope: '@robocorp'
    - name: Build frontend
      run: inv build-frontend
      env:
        CI: true
        NODE_AUTH_TOKEN: ${{ secrets.GH_PAT_READ_PACKAGES }}
    - name: Build OAuth2 config
      run: inv build-oauth2-config
      env:
        GH_TOKEN: ${{ secrets.GH_PAT_GHA_TO_ANOTHER_REPO }}
    - name: Build binary
      env:
        RC_ACTION_SERVER_FORCE_DOWNLOAD_RCC: 'true'
        RC_ACTION_SERVER_DO_SELFTEST: 'true'
        MACOS_SIGNING_CERT: ${{ secrets.MACOS_SIGNING_CERT_SEMA4AI }}
        MACOS_SIGNING_CERT_PASSWORD: ${{ secrets.MACOS_SIGNING_CERT_PASSWORD_SEMA4AI
          }}
        MACOS_SIGNING_CERT_NAME: ${{ secrets.MACOS_SIGNING_CERT_NAME_SEMA4AI }}
        APPLEID: ${{ secrets.MACOS_APP_ID_FOR_NOTARIZATION_SEMA4AI }}
        APPLETEAMID: ${{ secrets.MACOS_TEAM_ID_FOR_NOTARIZATION_SEMA4AI }}
        APPLEIDPASS: ${{ secrets.MACOS_APP_ID_PASSWORD_FOR_NOTARIZATION_SEMA4AI }}
        VAULT_URL: ${{ secrets.WIN_SIGN_AZURE_KEY_VAULT_URL_SEMA4AI }}
        CLIENT_ID: ${{ secrets.WIN_SIGN_AZURE_KEY_VAULT_CLIENT_ID_SEMA4AI }}
        TENANT_ID: ${{ secrets.WIN_SIGN_AZURE_KEY_VAULT_TENANT_ID_SEMA4AI }}
        CLIENT_SECRET: ${{ secrets.WIN_SIGN_AZURE_KEY_VAULT_CLIENT_SECRET_SEMA4AI
          }}
        CERTIFICATE_NAME: ${{ secrets.WIN_SIGN_AZURE_KEY_VAULT_CERTIFICATE_NAME_SEMA4AI
          }}
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_REF_NAME: ${{ github.ref_name }}
        GITHUB_PR_NUMBER: ${{ github.event.pull_request.number }}
      run: poetry run inv build-executable --sign --go-wrapper
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: action-server-${{ matrix.os }}
        path: action_server/dist/final/
    - name: Test (not integration)
      env:
        GITHUB_ACTIONS_MATRIX_NAME: ${{ matrix.name }}
        CI_CREDENTIALS: ${{ secrets.CI_CREDENTIALS }}
        CI_ENDPOINT: ${{ secrets.CI_ENDPOINT }}
        ACTION_SERVER_TEST_ACCESS_CREDENTIALS: ${{ secrets.ACTION_SERVER_TEST_ACCESS_CREDENTIALS
          }}
        ACTION_SERVER_TEST_HOSTNAME: ${{ secrets.ACTION_SERVER_TEST_HOSTNAME }}
      run: poetry run inv test-not-integration
    - name: Test (integration)
      env:
        GITHUB_ACTIONS_MATRIX_NAME: ${{ matrix.name }}
        CI_CREDENTIALS: ${{ secrets.CI_CREDENTIALS }}
        CI_ENDPOINT: ${{ secrets.CI_ENDPOINT }}
        ACTION_SERVER_TEST_ACCESS_CREDENTIALS: ${{ secrets.ACTION_SERVER_TEST_ACCESS_CREDENTIALS
          }}
        ACTION_SERVER_TEST_HOSTNAME: ${{ secrets.ACTION_SERVER_TEST_HOSTNAME }}
      run: poetry run inv test-binary --jobs 0
    - name: '`inv lint`, potentially fixed with `inv pretty`'
      if: always()
      run: '

        inv lint

        '
    - name: '`inv typecheck`'
      if: always()
      run: '

        inv typecheck

        '
    - name: '`inv docs` with checking on files changed'
      if: always()
      run: '

        inv docs --check

        '
